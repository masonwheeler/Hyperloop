#!/usr/bin/env python
import math as m
import numpy as np
import scipy as sp
from matplotlib import pyplot as plt
from mpl_toolkits.mplot3d import Axes3D 
import time

eps = m.pow(10,-10)

def rLommel(mu, nu, b):
	t = (1/(mu + nu + 1)) * (1/(mu - nu + 1))
	r = t
	n = 2
	while m.fabs(t) > eps:
		t = t * ((-b) / (mu + 2*n - 1 - nu)) * (b / (mu + 2*n - 1 + nu)) 
		r = r + t
		n = n + 1
	return r

def evalXYaZero(b, k):
	X, Y = [[0]*(k + 1), [0]*(k + 1)]
	if m.fabs(b) < eps:
		X[0] = 1 - (m.pow(b,2)/6) * (1-m.pow(b,2)/20)
		Y[0] = (m.pow(b,2)/2) * (1 - (m.pow(b,2)/6) * (1-m.pow(b,2)/30))
	else:
		X[0] = m.sin(b)/b
		Y[0] = (1 - m.cos(b))/b
	A = b * m.sin(b)
	D = m.sin(b) - b * m.cos(b)
	B = b * D
	C = -m.pow(b,2) * m.sin(b)
	for n in range(1, k + 1):
		X[n] = (n * A * rLommel(n + 0.5, 1.5, b) + B * rLommel(n + 1.5, 0.5, b) + m.cos(b)) / (1 + n)
		Y[n] = (C * rLommel(n + 1.5, 1.5, b) + m.sin(b)) / (2 + n) + D * rLommel(n + 0.5, 0.5, b)
	return [X, Y]


def evalXYaSmall(a, b, k, p):
	X0, Y0 = evalXYaZero(b, k + 4*p + 2)
	X, Y = [[0]*(k + 1), [0]*(k + 1)]
	t = 1
	for j in range(k + 1):
		X[j] = X0[j] - (a/2) * Y0[j + 2]
		Y[j] = Y0[j] - (a/2) * X0[j + 2]
	for n in range(1, p + 1):
		t = -t * m.pow(a,2)/(16 * n * (2*n - 1))
		for j in range(k + 1):
			X[j] += t * ((X0[4*n + j] - a * Y0[4*n + j + 2])/(4*n + 2))
			Y[j] += t * ((Y0[4*n + j] + a * X0[4*n + j + 2])/(4*n + 2))
	return [X, Y]


start_time = time.time()
print evalXYaSmall(m.pow(10,-4), 36, 12, 4)
print("--- %s seconds ---" % (time.time() - start_time))
